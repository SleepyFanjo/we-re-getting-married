{"version":3,"sources":["js/JwtContext.js","js/utils/LazyWithPreload.js","js/routes.js","js/components/Loader.js","js/App.js","serviceWorker.js","index.js"],"names":["JwtContext","React","createContext","JwtProvider","children","useState","localStorage","getItem","jwtToken","setJwtToken","Provider","value","LazyWithPreload","importFunc","lazyComponent","lazy","preload","Home","Guest","Beds","Transport","Register","Registered","routes","path","exact","component","private","SimpleLoader","className","rest","StyledLoader","ProtectedRoute","useContext","to","App","fallback","map","route","RouteComponent","Route","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAEMA,EAAaC,IAAMC,cAAc,MAE1BC,EAAc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACXC,mBAASC,aAAaC,QAAQ,aADnB,mBACpCC,EADoC,KAC1BC,EAD0B,KAG3C,OACE,kBAACT,EAAWU,SAAZ,CACEC,MAAO,CACLH,WACAC,gBAGDL,IAKQJ,O,2CCXAY,EANS,SAAAC,GACtB,IAAMC,EAAgBC,eAAKF,GAE3B,OADAC,EAAcE,QAAUH,EACjBC,GCHHG,EAAOL,GAAgB,kBAAM,gCAC7BM,EAAQN,GAAgB,kBAAM,gCAC9BO,EAAOP,GAAgB,kBAAM,gCAC7BQ,EAAYR,GAAgB,kBAAM,gCAClCS,EAAWT,GAAgB,kBAAM,iCACjCU,EAAaV,GAAgB,kBAAM,gCAInCW,EAAS,CACb,CAAEC,KAAM,IAAKC,OAAO,EAAMC,UAAWT,EAAMU,SAAS,GACpD,CAAEH,KAAM,SAAUC,OAAO,EAAMC,UAAWR,EAAOS,SAAS,GAC1D,CAAEH,KAAM,aAAcC,OAAO,EAAMC,UAAWN,EAAWO,SAAS,GAClE,CAAEH,KAAM,QAASC,OAAO,EAAMC,UAAWP,EAAMQ,SAAS,GACxD,CAAEH,KAAM,SAAUC,OAAO,EAAOC,UARpBd,GAAgB,kBAAM,gCAQgBe,SAAS,GAC3D,CAAEH,KAAM,UAAWC,OAAO,EAAOC,UARpBd,GAAgB,kBAAM,gCAQiBe,SAAS,GAC7D,CAAEH,KAAM,YAAaC,OAAO,EAAOC,UAAWL,EAAUM,SAAS,GACjE,CAAEH,KAAM,cAAeC,OAAO,EAAOC,UAAWJ,EAAYK,SAAS,IAGxDJ,O,+HCpBFK,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAcC,EAAjB,oCAC1B,uCAAKD,UAAS,iBAAYA,GAAwB,KAAUC,GAC1D,8BACA,8BACA,8BACA,gCAISC,EAAe,SAAC,GAAD,IAAGF,EAAH,EAAGA,UAAcC,EAAjB,oCAC1B,uCAAKD,UAAS,uBAAkBA,GAAwB,KAAUC,M,2LCA9DE,EAAiB,SAAC,GAA2B,IAAzB5B,EAAwB,EAAxBA,SAAa0B,EAAW,4BACxCtB,EAAayB,qBAAWjC,KAAxBQ,SACR,OACE,kBAAC,IAAUsB,EAAOtB,EAAWJ,EAAW,kBAAC,IAAD,CAAU8B,GAAG,aA6B1CC,EAzBH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,OAClB,kBAAC,IAAD,KACGb,IAAOc,KAAI,SAAAC,GACV,IAAMC,EAAiBD,EAAMX,QAAUK,EAAiBQ,IAExD,OACE,kBAACD,EAAD,CACEE,IAAKH,EAAMd,KACXC,MAAOa,EAAMb,MACbD,KAAMc,EAAMd,KACZE,UAAWY,EAAMZ,oBCrBfgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,cD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f3866cd8.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst JwtContext = React.createContext(null)\n\nexport const JwtProvider = ({ children }) => {\n  const [jwtToken, setJwtToken] = useState(localStorage.getItem('jwtToken'))\n\n  return (\n    <JwtContext.Provider\n      value={{\n        jwtToken,\n        setJwtToken\n      }}\n    >\n      {children}\n    </JwtContext.Provider>\n  )\n}\n\nexport default JwtContext\n","import { lazy } from 'react'\n\nconst LazyWithPreload = importFunc => {\n  const lazyComponent = lazy(importFunc)\n  lazyComponent.preload = importFunc\n  return lazyComponent\n}\n\nexport default LazyWithPreload\n","import LazyWithPreload from './utils/LazyWithPreload'\n\nconst Home = LazyWithPreload(() => import('./pages/Home.js'))\nconst Guest = LazyWithPreload(() => import('./pages/Guest.js'))\nconst Beds = LazyWithPreload(() => import('./pages/Beds.js'))\nconst Transport = LazyWithPreload(() => import('./pages/Transport.js'))\nconst Register = LazyWithPreload(() => import('./pages/Register.js'))\nconst Registered = LazyWithPreload(() => import('./pages/Registered.js'))\nconst Login = LazyWithPreload(() => import('./pages/Login.js'))\nconst Logout = LazyWithPreload(() => import('./pages/Logout.js'))\n\nconst routes = [\n  { path: '/', exact: true, component: Home, private: true },\n  { path: '/guest', exact: true, component: Guest, private: true },\n  { path: '/transport', exact: true, component: Transport, private: true },\n  { path: '/beds', exact: true, component: Beds, private: true },\n  { path: '/login', exact: false, component: Login, private: false },\n  { path: '/logout', exact: false, component: Logout, private: false },\n  { path: '/register', exact: false, component: Register, private: false },\n  { path: '/registered', exact: false, component: Registered, private: false }\n]\n\nexport default routes\n","import React from 'react'\n\nexport const SimpleLoader = ({ className, ...rest }) => (\n  <div className={`Loader ${className ? className : ''}`} {...rest}>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n  </div>\n)\n\nexport const StyledLoader = ({ className, ...rest }) => (\n  <div className={`StyledLoader ${className ? className : ''}`} {...rest}></div>\n)\n","import React, { Suspense, useContext } from 'react'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from 'react-router-dom'\n\nimport { StyledLoader } from './components/Loader'\nimport JwtContext, { JwtProvider } from './JwtContext'\nimport routes from './routes'\n\nconst ProtectedRoute = ({ children, ...rest }) => {\n  const { jwtToken } = useContext(JwtContext)\n  return (\n    <Route {...rest}>{jwtToken ? children : <Redirect to=\"/login\" />}</Route>\n  )\n}\n\nconst App = () => {\n  return (\n    <JwtProvider>\n      <Router>\n        <Suspense fallback={<StyledLoader />}>\n          <Switch>\n            {routes.map(route => {\n              const RouteComponent = route.private ? ProtectedRoute : Route\n\n              return (\n                <RouteComponent\n                  key={route.path}\n                  exact={route.exact}\n                  path={route.path}\n                  component={route.component}\n                />\n              )\n            })}\n          </Switch>\n        </Suspense>\n      </Router>\n    </JwtProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'sass/index.scss'\nimport App from 'js/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('react-app'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}